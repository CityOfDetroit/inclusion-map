{"version":3,"sources":["index.js"],"names":["mapboxgl","accessToken","map","Map","container","style","zoom","center","baseUrl","geocoder","MapboxGeocoder","countries","marker","color","bbox","filter","item","context","i","id","split","shift","text","reduce","acc","cur","addControl","NavigationControl","geoJson","type","features","on","addSource","addLayer","spinner","removeAttribute","url","fetch","method","mode","cache","redirect","then","resp","json","data","setAttribute","console","log","length","popup","Popup","setHTML","el","document","createElement","Marker","setLngLat","coordinates","longitude","latitude","addTo","getGeocoderResults","theMarker","e","flyTo","geometry","lngLat","lat","lng","getGeoJson","push","alias","is_closed","image_url","location","city","zip_code","checkStatus","response","ok","error","Error","statusText","getElementById","setdefault","showSpinner","className","setTimeout","replace","ev","getSource","setData","result","built_address","place_name","address1"],"mappings":"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","file":"inclusion-map.e31bb0bc.js","sourceRoot":"..","sourcesContent":["\nmapboxgl.accessToken = 'pk.eyJ1IjoiY2l0eW9mZGV0cm9pdCIsImEiOiJjajd3MGlodXIwZ3piMnhudmlzazVnNm44In0.BL29_7QRvcnOrVuXX_hD9A';\nvar map = new mapboxgl.Map({\n    container: 'map', // container id\n    style: 'mapbox://styles/mapbox/streets-v11', // stylesheet location\n    zoom: 11.7,\n    center: [-83.060303, 42.348495]\n});\n\nlet baseUrl = \"https://apis.detroitmi.gov/crowdsource/yahoo/wifi/locations/\";\n//================ geocoder for address search====================//\nconst geocoder = new MapboxGeocoder({\n    accessToken: mapboxgl.accessToken,\n    // limit results to North America\n    countries: 'us',\n    marker: {\n        color: 'orange'\n    },\n    // further limit results to the geographic bounds representing the region of\n    // Detroit Michigan\n    bbox: [-83.3437, 42.2102, -82.8754, 42.5197],\n    // apply a client side filter to further limit results to those strictly within\n    // the detroit michigan region\n    filter: function (item) {\n        // returns true if item contains the detroit michigan region\n        return item.context.map(function (i) {\n            // this code attempts to find the `region` named `Detroit Michigan`\n            return (i.id.split('.').shift() === 'region' && i.text === 'Michigan');\n        }).reduce(function (acc, cur) {\n            return acc || cur;\n        });\n    },\n    mapboxgl: mapboxgl,\n});\n// Add zoom and rotation controls to the map.\nmap.addControl(geocoder);\nmap.addControl(new mapboxgl.NavigationControl());\n\n// document.getElementById('geocoder').appendChild(geocoder.onAdd(map));\n//================ geocoder for address search ends====================//\nconst geoJson = {\n    type: \"FeatureCollection\",\n    features: [],\n};\n//data to onLoad\nmap.on('load', function () {\n    map.addSource('places', {\n        \"type\": 'geojson',\n        \"data\": geoJson\n    });\n    map.addLayer({\n        \"id\": \"places\",\n        \"source\": \"places\",\n        \"type\": \"circle\",\n        \"paint\": {\n            \"circle-radius\": 10,\n            \"circle-color\": \"#007cbf\"\n        }\n       \n    });\n   \n spinner.removeAttribute('hidden');\n    const url = baseUrl + '42.3314,-83.0458';\n    fetch(url, {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        redirect: 'follow', // manual, *follow, error\n    }).then(resp => resp.json())\n        // Transform the data into json\n        .then((data) => {\n             spinner.setAttribute(\"hidden\", \"\");\n            console.log(data)\n            for (let i = 0; i < data.length; i++) {\n                var popup = new mapboxgl.Popup()\n                    .setHTML(\n                    );\n                //console.log(data[i].rating);\n                // .setText(data[i].name);\n                // create DOM element for the marker\n                var el = document.createElement('div');\n                el.id = 'marker';\n                // create the marker\n                var marker = new mapboxgl.Marker()\n                    .setLngLat([data[i].coordinates.longitude, data[i].coordinates.latitude])\n                    .addTo(map);\n            };\n        });\n\n    getGeocoderResults()\n\n})// then data\nvar theMarker = {};\nmap.on('click', (e) => {\n    console.log(\"e\" + e)\n  // Add spinner function\n    spinner.removeAttribute('hidden');\n    map.flyTo({ center: e.features[0].geometry.coordinates });\n    //base url\n    const url = baseUrl + [e.lngLat.lat, e.lngLat.lng];\n   \n    // map.flyTo({ center: e.features[0].geometry.coordinates });\n    //fetch to get api from html\n    fetch(url, {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        redirect: 'follow', // manual, *follow, error\n    })\n        .then(resp => resp.json())\n        // Transform the data into json\n        .then((data) => {\n            spinner.setAttribute(\"hidden\", \"\");\n            console.log(data)\n            const geoJson = getGeoJson;\n            for (let i = 0; i < data.length; i++) {\n                getGeoJson.features.push({\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [data[i].coordinates.longitude, data[i].coordinates.latitude]\n                    },\n                    \"properties\": {\n                        \"id\": data[i].id,\n                        \"stationName\": data[i].alias,\n                        \"isClosed\": data[i].is_closed,\n                        \"imageUrl\": data[i].image_url,\n                        \"city\": data[i].location.city,\n                        \"postalCode\": data[i].location.zip_code,\n                    },\n                    \"layout\": {\n                        \"icon-image\": \"{icon}-15\",\n                        \"icon-allow-overlap\": true\n                    }\n                });\n                console.log(data[i]);\n\n                var el = document.createElement('div');\n                el.id = 'marker';\n                // create the marker\n                var marker = new mapboxgl.Marker()\n                    .setLngLat([data[i].coordinates.longitude, data[i].coordinates.latitude])\n                    .addTo(map);\n                // document.getElementById('geojson').innerHTML = JSON.stringify(geoJSON, null, 2);\n            }\n        })\n    // create DOM element for the marker\n    var el = document.createElement('div');\n    el.id = 'Marker';\n   \n//Add a marker to show where you clicked.\n\n    // create the marker\n    var marker = new mapboxgl.Marker(el)\n        .setLngLat(e.lngLat)\n        .addTo(map);\n        console.log(\"marker\"+marker.length);\n});\n\nlet getGeoJson = {\n    type: \"FeatureCollection\",\n    features: [],\n}\nconst checkStatus = response => {\n    if (response.ok) {\n        return response;\n        console.log(\"response\" + response)\n    } else {\n        const error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n        console.log(\"error\" + error)\n    }\n}\nconst spinner = document.getElementById(\"spinner\");\nlet setdefault = true;\n\nfunction showSpinner() {\n    spinner.className = \"show\";\n    setTimeout(() => {\n        spinner.className = spinner.className.replace(\"show\", \"\");\n    }, 5000);\n}\nfunction getGeocoderResults() {\n    geocoder.on('result', function (ev) {\n        spinner.removeAttribute('hidden');\n       \n        map.getSource('places').setData(ev.result.geometry);\n        built_address = ev.result.place_name\n        console.log(\"coordinates \", ev.result.geometry.coordinates[0])\n        // Api for data\n        const url = baseUrl + [ev.result.geometry.coordinates[1], ev.result.geometry.coordinates[0]];\n        fetch(url, {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            redirect: 'follow', // manual, *follow, error\n        })\n            .then(checkStatus)\n            .then(resp => resp.json())\n            // Transform the data into json\n            .then((data) => {\n                spinner.setAttribute(\"hidden\", \"\");\n                console.log(data)\n                const geoJson = getGeoJson;\n                for (let i = 0; i < data.length; i++) {\n                    getGeoJson.features.push({\n                        \"type\": \"Feature\",\n                        \"geometry\": {\n                            \"type\": \"Point\",\n                            \"coordinates\": [data[i].coordinates.longitude, data[i].coordinates.latitude]\n                        },\n                        \"properties\": {\n                            \"id\": data[i].id,\n                            \"stationName\": data[i].alias,\n                            \"isClosed\": data[i].is_closed,\n                            \"imageUrl\": data[i].image_url,\n                            \"Address1\": data[i].location.address1,\n                            \"city\": data[i].location.city,\n                            \"postalCode\": data[i].location.zip_code,\n                        },\n                        \"layout\": {\n                            \"icon-image\": \"{icon}-15\",\n                            \"icon-allow-overlap\": true\n                        }\n                    });\n                    console.log(data[i]);\n                    // create DOM element for the marker\n                    var el = document.createElement('div');\n                    el.id = 'marker';\n                    // create the marker\n                    var marker = new mapboxgl.Marker()\n                        .setLngLat([data[i].coordinates.longitude, data[i].coordinates.latitude])\n                        .addTo(map);\n                    // document.getElementById('geojson').innerHTML = JSON.stringify(geoJSON, null, 2);\n                }\n            })\n\n    });\n}\n// function getUserLocation() {\n//     // request to allow user position\n//     if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(showPosition);\n//         function showPosition(position) {\n//\n//             // get user current coordinates and center map on coordiates\n//             console.log('L2', position)\n//\n//             //console.log(position.coords.latitude, position.coords.latitude)\n//             user_coordinates = {\n//               lat: position.coords.latitude,\n//               lng: position.coords.longitude\n//             };\n//             // draw user location on mao\n//             map.getSource('places').setData({type: \"Point\", coordinates: [user_coordinates.lng,user_coordinates.lat]});\n//\n//             getGeocoderResults()\n//             // geocoder.query(user_coordinates.lat, user_coordinates.lng)\n//\n//             // Listen for the `result` event from the MapboxGeocoder that is triggered when a user\n//\n//             // makes a selection and add a symbol that matches the result.\n//\n//         }\n//     } else {\n//         // if device doesnt support location\n//         console.log('device doesnt support location')\n//     }\n// }; /* END getUserLocation(); */\n"]}