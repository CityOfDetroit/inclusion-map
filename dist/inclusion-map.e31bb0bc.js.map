{"version":3,"sources":["index.js"],"names":["mapboxgl","accessToken","map","Map","container","style","zoom","center","geocoder","MapboxGeocoder","countries","filter","item","context","i","id","split","shift","text","reduce","acc","cur","document","getElementById","appendChild","onAdd","geoJson","type","features","on","addSource","addLayer","getGeoJson","url","fetch","method","mode","cache","redirect","then","resp","json","data","console","log","length","popup","Popup","setHTML","image_url","name","location","address1","city","state","zip_code","rating","el","createElement","marker","Marker","setLngLat","coordinates","longitude","latitude","setPopup","addTo","push","alias","is_closed"],"mappings":"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","file":"inclusion-map.e31bb0bc.js","sourceRoot":"..","sourcesContent":["\nmapboxgl.accessToken = 'pk.eyJ1IjoiY2l0eW9mZGV0cm9pdCIsImEiOiJjajd3MGlodXIwZ3piMnhudmlzazVnNm44In0.BL29_7QRvcnOrVuXX_hD9A';\nvar map = new mapboxgl.Map({\n    container: 'map', // container id\n    style: 'mapbox://styles/mapbox/streets-v11', // stylesheet location\n    zoom: 10.7,\n    center: [-83.060303, 42.348495]\n});\n//================ geocoder for address search====================//\nlet geocoder = new MapboxGeocoder({\n    accessToken: mapboxgl.accessToken,\n    // limit results to North America\n    countries: 'us',\n    // further limit results to the geographic bounds representing the region of\n    // Detroit Michigan\n    // bbox: [-83.3437, 42.2102, -82.8754, 42.5197],\n    // apply a client side filter to further limit results to those strictly within\n    // the detroit michigan region\n    filter: function(item) {\n        // returns true if item contains the detroit michigan region\n        return item.context.map(function (i) {\n            // this code attempts to find the `region` named `Detroit Michigan`\n            return (i.id.split('.').shift() === 'region' && i.text === 'Michigan');\n        }).reduce(function(acc, cur) {\n            return acc || cur;\n        });\n    },\n    mapboxgl: mapboxgl\n});\ndocument.getElementById('geocoder').appendChild(geocoder.onAdd(map));\n//================ geocoder for address search ends====================//\nconst geoJson = {\n    type: \"FeatureCollection\",\n    features: [],\n};\nmap.on('load', function(){\n    map.addSource('places',{\n        \"type\": 'geojson',\n        \"data\": geoJson\n    });\n    map.addLayer({\n        \"id\": \"places\",\n        \"source\": \"places\",\n        \"type\": \"circle\",\n        \"paint\": {\n            \"circle-radius\": 10,\n            \"circle-color\": \"#007cbf\"\n        }\n    });\n    let getGeoJson ={\n        type: \"FeatureCollection\",\n        features: [],\n    }\n    const url = 'https://apis.detroitmi.gov/crowdsource/yahoo/wifi/locations/42.3314,-83.0458 ';\n    fetch(url, {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        redirect: 'follow', // manual, *follow, error\n    })\n        .then(resp => resp.json())\n        // Transform the data into json\n        .then((data) => {\n            console.log(data)\n            const geoJson = getGeoJson;\n\n            for (let i = 0; i < data.length; i++) {\n                var popup = new mapboxgl.Popup()\n                    .setHTML(\n                        '<div class=\"card mb-3\">' +\n                        '  <div class=\"row no-gutters\">' +\n                        '    <div class=\"col-md-4\">' +\n                        '<img class=\"card-img\" src=\"' + data[i].image_url + '\"/>' +\n                        '    </div>' +\n                        '    <div class=\"col-md-8\">' +\n                        '      <div class=\"card-body\">' +\n                        '        <h6 class=\"card-title\">'+data[i].name+'</h6>' +\n                        '<p class=\"place_address\">'\n                        +'<a href=\"\">'\n                        +data[i].location.address1 +','+ data[i].location.city+','\n                        + data[i].location.state+',' + data[i].location.zip_code +\n                        '</a>'+\n                        '</p>' +\n                        '<div class=\"rating\" data-rating=\"'+ data[i].rating+'\"><div class=\"star\"></div> <div class=\"star\"></div> <div class=\"star\"></div> <div class=\"star\"></div> <div class=\"star\"></div> </div>'+\n                        '      </div>' +\n                        '    </div>' +\n                        '  </div>' +\n                        '</div>'\n                    );\n                console.log(data[i].rating);\n                    // .setText(data[i].name);\n// create DOM element for the marker\n                var el = document.createElement('div');\n                el.id = 'marker';\n// create the marker\n                var marker = new mapboxgl.Marker()\n                    .setLngLat([data[i].coordinates.longitude, data[i].coordinates.latitude])\n                    .setPopup(popup)\n                    .addTo(map);\n\n                getGeoJson.features.push({\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [data[i].coordinates.longitude, data[i].coordinates.latitude]\n                    },\n                    \"properties\": {\n                        \"id\": data[i].id,\n                        \"stationName\": data[i].alias,\n                        \"isClosed\": data[i].is_closed,\n                        \"imageUrl\" : data[i].image_url,\n                        \"Address1\": data[i].location.address1,\n                        \"city\": data[i].location.city,\n                        \"postalCode\": data[i].location.zip_code,\n                    },\n                    \"layout\": {\n                        \"icon-image\": \"{icon}-15\",\n                        \"icon-allow-overlap\": true\n                    }\n                });\n                console.log(data[i]);\n            }\n        })\n})// then data\n\n\n//=================yelp for wifi search ============================//\n"]}